/// <reference types="node" />
export = NodeRtmpClient;
declare class NodeRtmpClient {
    constructor(rtmpUrl: any);
    url: any;
    info: Url.UrlWithParsedQuery;
    isPublish: boolean;
    launcher: EventEmitter;
    handshakePayload: Buffer;
    handshakeState: number;
    handshakeBytes: number;
    parserBuffer: Buffer;
    parserState: number;
    parserBytes: number;
    parserBasicBytes: number;
    parserPacket: any;
    inPackets: Map<any, any>;
    inChunkSize: number;
    outChunkSize: number;
    streamId: number;
    isSocketOpen: boolean;
    onSocketData(data: any): void;
    onSocketError(e: any): void;
    onSocketClose(): void;
    onSocketTimeout(): void;
    on(event: any, callback: any): void;
    startPull(): void;
    startPush(): void;
    _start(): void;
    socket: any;
    stop(): void;
    pushAudio(audioData: any, timestamp: any): void;
    pushVideo(videoData: any, timestamp: any): void;
    pushScript(scriptData: any, timestamp: any): void;
    rtmpUrlParser(url: any): Url.UrlWithParsedQuery;
    rtmpChunkBasicHeaderCreate(fmt: any, cid: any): Buffer;
    rtmpChunkMessageHeaderCreate(header: any): Buffer;
    rtmpChunksCreate(packet: any): Buffer;
    rtmpChunkRead(data: any, p: any, bytes: any): void;
    rtmpPacketParse(): void;
    rtmpChunkMessageHeaderRead(): number;
    rtmpPacketAlloc(): void;
    rtmpHandler(): void | 0 | -1;
    rtmpControlHandler(): void;
    ackSize: any;
    rtmpEventHandler(): void;
    rtmpInvokeHandler(): void;
    rtmpCommandOnresult(invokeMessage: any): void;
    rtmpCommandOnerror(invokeMessage: any): void;
    rtmpCommandOnstatus(invokeMessage: any): void;
    rtmpOnconnect(): void;
    rtmpOncreateStream(sid: any): void;
    rtmpAudioHandler(): void;
    rtmpVideoHandler(): void;
    rtmpDataHandler(): void;
    sendInvokeMessage(sid: any, opt: any): void;
    rtmpSendConnect(): void;
    rtmpSendReleaseStream(): void;
    rtmpSendFCPublish(): void;
    rtmpSendCreateStream(): void;
    rtmpSendPlay(): void;
    rtmpSendSetBufferLength(bufferTime: any): void;
    rtmpSendPublish(): void;
    rtmpSendSetChunkSize(): void;
    rtmpSendFCUnpublish(): void;
    rtmpSendDeleteStream(): void;
    rtmpSendPingResponse(time: any): void;
}
import Url = require("url");
import EventEmitter = require("events");
